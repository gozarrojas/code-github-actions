name: Deploy FastAPI

on:
  workflow_dispatch
#  push:
#    branches:
#      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #- name: Set up Docker Buildx
       # uses: docker/setup-buildx-action@v3

      #- name: Login to Docker Hub
       # uses: docker/login-action@v3
        #with:
         # username: ${{ vars.DOCKERHUB_USERNAME }}
          #password: ${{ secrets.DOCKERHUB_TOKEN }}

      #- name: Build and push Docker image
       # uses: docker/build-push-action@v5
        #with:
         # context: .
          #push: true
          #tags: gozarrojas/fastapi-api:latest

      - name: Create ecsTaskExecutionRole if it doesn't exist
        run: |
            ROLE_EXISTS=$(aws iam get-role --role-name ecsTaskExecutionRole 2>/dev/null || echo "MISSING")
            
            if [[ "$ROLE_EXISTS" == "MISSING" ]]; then
              echo "üìå Rol ecsTaskExecutionRole no existe. Cre√°ndolo..."
  
              aws iam create-role \
                --role-name ecsTaskExecutionRole \
                --assume-role-policy-document '{
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "ecs-tasks.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                }'
  
              aws iam attach-role-policy \
                --role-name ecsTaskExecutionRole \
                --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
              
              echo "‚úÖ Rol creado y pol√≠tica asociada."
            else
              echo "‚úÖ Rol ecsTaskExecutionRole ya existe."
            fi
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: us-east-1

      - name: Delete cluster if inactive
        run: |
              CLUSTER_STATUS=$(aws ecs describe-clusters \
                --clusters fastapi-cluster \
                --region us-east-1 \
                --query "clusters[0].status" \
                --output text 2>/dev/null || echo "MISSING")
    
              if [[ "$CLUSTER_STATUS" == "INACTIVE" ]]; then
                echo "üß® Cluster inactivo detectado. Elimin√°ndolo..."
                aws ecs delete-cluster --cluster fastapi-cluster --region us-east-1
                echo "‚è≥ Esperando 10 segundos para asegurar eliminaci√≥n..."
                sleep 10
              else
                echo "‚úÖ Cluster no est√° inactivo, o no existe a√∫n."
              fi
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_REGION: us-east-1

      - name: Create ECS Cluster (force recreation if inactive)
        run: |
          CLUSTER_STATUS=$(aws ecs describe-clusters \
            --clusters fastapi-cluster \
            --region us-east-1 \
            --query "clusters[0].status" \
            --output text 2>/dev/null || echo "MISSING")

          if [[ "$CLUSTER_STATUS" == "INACTIVE" || "$CLUSTER_STATUS" == "MISSING" ]]; then
            echo "üß® Cluster inactivo o no existe. Eliminando y recreando..."
            aws ecs delete-cluster --cluster fastapi-cluster --region us-east-1 || true
            sleep 5
            aws ecs create-cluster --cluster-name fastapi-cluster --region us-east-1
            echo "‚úÖ Cluster recreado."
          else
            echo "‚úÖ Cluster ya existe y est√° activo."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Register ECS Task Definition (if not exists or needs update)
        run: |
            # Intentar describir la tarea para ver si existe
            TASK_EXISTS=$(aws ecs describe-task-definition \
              --task-definition fastapi-task \
              --region us-east-1 2>/dev/null || echo "MISSING")
            
            if [ "$TASK_EXISTS" = "MISSING" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              # Verificar que el JSON es v√°lido antes de registrarlo
              cat ecs-task-definition.json
              
              # Registrar la definici√≥n de tarea
              aws ecs register-task-definition \
                --cli-input-json file://ecs-task-definition.json \
                --region us-east-1
              
              echo "Task definition registered/updated."
            else
              echo "Task definition already exists and no update requested."
            fi
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: us-east-1

      - name: Create ECS Service (if not exists)
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services \
          --cluster fastapi-cluster \
          --services fastapi-service \
          --region us-east-1 \
          --query "length(services[?status!='INACTIVE'])" \
          --output text)

          if [ "$SERVICE_EXISTS" = "0" ]; then
              aws ecs create-service \
                --cluster fastapi-cluster \
                --service-name fastapi-service \
                --task-definition fastapi-task \
                --desired-count 1 \
                --launch-type FARGATE \
                --network-configuration "awsvpcConfiguration={subnets=[subnet-0cbdc6ab45182260a],securityGroups=[sg-0195427339b9d5bff],assignPublicIp=ENABLED}" \
                --region us-east-1
          else
              echo "Service already exists."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          cluster: fastapi-cluster  # Aseg√∫rate de que exista en AWS
          service: fastapi-service  # Tambi√©n debe existir
          wait-for-service-stability: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1